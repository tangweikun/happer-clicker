{"version":3,"sources":["assets/decrease.svg","assets/plus.svg","assets/refresh.svg","Header.js","Clicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Clicker","useState","count","setCount","onClick","src","PLUS_ICON","alt","REFRESH_ICON","DECREASE_ICON","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,kMCGpC,SAASC,IACd,OAAO,yBAAKC,UAAU,UAAf,iB,mECEF,SAASC,IAAW,IAAD,EACEC,mBAAS,GADX,mBACjBC,EADiB,KACVC,EADU,KAexB,OACE,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,mBAAmBG,GAClC,yBAAKH,UAAU,wBACb,yBAAKA,UAAU,YAAYK,QAhBjC,WACED,EAASD,EAAQ,KAgBX,yBAAKG,IAAKC,IAAWC,IAAI,UAE3B,yBAAKR,UAAU,aAAaK,QAXlC,WACED,EAAS,KAWH,yBAAKE,IAAKG,IAAcD,IAAI,aAE9B,yBAAKR,UAAU,UAAUK,QAlB/B,WACED,EAASD,EAAQ,KAkBX,yBAAKG,IAAKI,IAAeF,IAAI,gB,MClBxBG,MATf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d5b815aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/decrease.099efd39.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.116fe8d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.8a3f6236.svg\";","import React from \"react\";\nimport \"./Header.css\";\n\nexport function Header() {\n  return <nav className=\"header\">Happy Clicker</nav>;\n}\n","import React, { useState } from \"react\";\nimport \"./Clicker.css\";\nimport DECREASE_ICON from \"./assets/decrease.svg\";\nimport PLUS_ICON from \"./assets/plus.svg\";\nimport REFRESH_ICON from \"./assets/refresh.svg\";\n\nexport function Clicker() {\n  const [count, setCount] = useState(0);\n\n  function handleAdd() {\n    setCount(count + 1);\n  }\n\n  function handleDecrease() {\n    setCount(count - 1);\n  }\n\n  function handleRefresh() {\n    setCount(0);\n  }\n\n  return (\n    <div className=\"clicker-wrapper\">\n      <div className=\"clicker-display\">{count}</div>\n      <div className=\"clicker-button-panel\">\n        <div className=\"btn-green\" onClick={handleAdd}>\n          <img src={PLUS_ICON} alt=\"plus\" />\n        </div>\n        <div className=\"btn-orange\" onClick={handleRefresh}>\n          <img src={REFRESH_ICON} alt=\"refresh\" />\n        </div>\n        <div className=\"btn-red\" onClick={handleDecrease}>\n          <img src={DECREASE_ICON} alt=\"decrease\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Header } from \"./Header\";\nimport { Clicker } from \"./Clicker\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Clicker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}